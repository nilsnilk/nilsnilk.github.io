{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMdx":{"nodes":[{"id":"f7ff94b1-917c-5936-a567-b8255b5f1c53","frontmatter":{"title":"Mapdraw","image":"mapdraw2.png"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Mapdraw\",\n  \"image\": \"mapdraw2.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Project Summary\"), mdx(\"p\", null, \"This project was part of a course at Ume\\xE5 University, where the objective was to create a prototype for a mobile application.\"), mdx(\"p\", null, \"Me and the rest of my group decided to make a GPS-position based game where the users could \\\"draw\\\" on a map by walking around. The user would push a button which left a trail behind them on the map when they moved. We wanted the user to be able to change color and thickness of the trail. Lastly, we wanted that other users could see the drawings on their devices as they were made in real-time.\"), mdx(\"p\", null, \"In order to do this we first decided to create a client for IOS with Swift and a server built with Node.js, MongoDB, Mongoose and socket.io. Even though the server was ready to go we decided to scrap the real-time solution; we determined that we didn't have the time needed in order to implement the sockets on the client-side. In the end we ended up with a solution where the user can choose whether they want to upload the drawing or not. In the socket.io-based solution required the client to continually send its position to the server. The solution we settled with only needed to post the drawing once to the database, which was fairly easy to implement with MongoDB and Mongoose. \"), mdx(\"h3\", null, \"Role\"), mdx(\"p\", null, \"Developer, Front End Designer\"), mdx(\"h3\", null, \"Gallery\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"mapdraw.png\",\n    \"alt\": \"Image of user interface\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"User interface of the final prototype, with drawings visible on the screen. The button at the bottom of the screen starts the drawing process. When the button is held, the icon will be changed to indicate that user currently is drawing. Current color is indicated by the position marker, which is visible to the left side of the screen. \")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"mapdraw3.png\",\n    \"alt\": \"Image of user interface\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"When the user is done with the drawing it can swipe to the plus-sign in order to store the drawing in the database... \")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"mapdraw4.png\",\n    \"alt\": \"Image of user interface\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"... Or if the user want to discard the drawing, it can swipe to the x-sign. \")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"mapdraw5.png\",\n    \"alt\": \"Image of user interface\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"The color choice menu will appear if the user presses the position indicator, where up-down movement determines the color and left-right determines shade. \")));\n}\n;\nMDXContent.isMDXComponent = true;"},{"id":"a7ac70df-1154-5402-8ea3-87de3cd4564e","frontmatter":{"title":"Schnelle Brillen App","image":"poster_dbt_small.png"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Schnelle Brillen App\",\n  \"image\": \"poster_dbt_small.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Project Summary\"), mdx(\"p\", null, \"This project was part of a course called \\\"Produktutveckling i medieteknik med metoden Design-Build-Test\\\" at Ume\\xE5 University, where the course participants were divided into teams. Each team were then given the task to design, build and test a concept for a company.\"), mdx(\"p\", null, \"The group I was part of was given the task to develop an app for a web-based sunglasses store in the netherlands called \\\"schnellebrillen.nl\\\". This company has a product range that consists of what they call \\\"fast glasses\\\", which is a slang expression that roughly refers to sunglasses that looks fast, i.e is aerodynamic.\"), mdx(\"p\", null, \"We decided to create a IOS and a android app which could determine wether a pair of sunglasses is \\\"fast\\\" or not, this would be determined with the help of a neural network. In addition, the app were to have a store where the user can browse the store's products.\"), mdx(\"p\", null, \"We ended up with a working prototype with three views; a home view (visible in the image to the right), a camera view and a store. the pictures taken by the camera is sent to two different tensorflow-models, where the first one finds the sunglasses, and then sends a cropped version of the picture to the other tensorflow-model, which determines wether the sunglasses are \\\"fast\\\" or not. In order to train these models, we had to create two large datasets, which consisted of pictures depicting people with \\\"fast\\\" and \\\"slow\\\" glasses respectively. these data sets consisted of around 2000 pictures each. The app will create visual indicators in the picture if and where sunglasses are found, and wether they are \\\"fast\\\" or not. \"), mdx(\"h3\", null, \"Role\"), mdx(\"p\", null, \"Front End Designer\"), mdx(\"h3\", null, \"Gallery\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"poster_dbt_finished_png.png\",\n    \"alt\": \"Project pitch poster\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Poster used to promote the presentation of the app.\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"schnelleb.png\",\n    \"alt\": \"Image of user interface\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"The home view of the app.\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"schnelleb2.png\",\n    \"alt\": \"Images reviewed by the tensorflow models\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Image where the model determined that the sunglasses were fast.\")));\n}\n;\nMDXContent.isMDXComponent = true;"},{"id":"ee9cad9c-0fd8-5d35-96ad-bdfc0ab6a536","frontmatter":{"title":"LoRa Cleaning App","image":"stad.png"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"LoRa Cleaning App\",\n  \"image\": \"stad.png\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Project Summary\"), mdx(\"p\", null, \"This project was part of a course at Ume\\xE5 University where you were given access to a network of LoRa-sensors that were spread across campus. The goal of the project was to use create an application that utilized these sensors.\"), mdx(\"p\", null, \"The sensors were able to register if people were in its proximity using a infra-red sensor. Me and the rest of my group came up with an app which used this together with the current weather (provided by the Ume\\xE5 University's weather station) determined if a space with a sensor needed cleaning. The idea was that the spaces would become dirty faster under wet weather conditions.\"), mdx(\"p\", null, \"Our solution consisted of an working prototype with a client build with React Native and a server built with Node.js, MongoDB and Mongoose. The server retrieved data from the sensors every 30 minutes. Then it calculated a \\\"dirtyness-index\\\" for each space based on the amount of detected people and the weather, which it then stored in a database. The client could then retrieve the \\\"dirtyness-index\\\" from the database. In addition to this, the client have the capability to update the database in order to mark spaces as clean. This allows the user to reset the \\\"dirtyness-index\\\" of a space if they have cleaned it. \"), mdx(\"h3\", null, \"Role\"), mdx(\"p\", null, \"Developer\"), mdx(\"h3\", null, \"Gallery\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"stadp1.png\",\n    \"alt\": \"Image of user interface\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Main screen of the app, with building and floor indicated in text. The spaces are shown as colored squares, where red and yellow indicates that the spaces needs cleaning (red is more urgent). and blue means recently cleaned.\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"stadp2.png\",\n    \"alt\": \"Image of user interface\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Floor selection screen. The building is determined with GPS.\")), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"stadp3.png\",\n    \"alt\": \"Image of user interface\"\n  }), \"\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"If the user clicks a non-blue space it gets a notification asking if they cleaned the space. If they press yes, the space turns blue, thus indicating that it was recently cleaned. \")));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"pageContext":{}},"staticQueryHashes":[]}